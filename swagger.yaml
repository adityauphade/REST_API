# 1) Define the security scheme type (HTTP bearer)
securityDefinitions:
    BearerAuth:            # arbitrary name for the security scheme
      type: bearer
      # scheme: bearer
      bearerFormat: JWT
          # optional, arbitrary value for documentation purposes

swagger: "2.0"
info:
  title: "Notes API"
  description: "Swagger for Notes Application."
  version: 1.0.0
host: "localhost:3000/NotesApp"
basepath: "/"
tags:
- name: "User Actions"
  description: "Login & Signup actions"
- name: "Note Actions"
  description: "Add, Edit & Delete action on Notes"
  
schemes:
- "http"
paths:
  /Signup:
    post:
      tags: [User Actions]
      summary: "Register a new user."
      parameters: 
        - in: "body"
          name: "New User"
          description: "Register a new user & get that object back."
          schema:
            type: object
            $ref: '#/definitions/signup'
      produces:
        - application/json
      responses:
        201:
          description: Signup Successful
        422:
          description: User already exists
        400:
          description: Task failed
  /Login:
    post:
      tags: [User Actions]
      summary: "Logins into the Application"
      parameters:
        - in: body
          name: "Login User"
          description: "Login the user & return the Logged in Object."
          schema:
            type: object
            $ref: '#/definitions/login'
      produces:
        - application/json
      responses:
        200:
          description: Login Successful
        404:
          description: User not found
        500:
          description: Server side error
  /UserData:
    get:
      tags: [User Actions]
      summary: "Returns a list of users."
      description: "Returns the list of stored Users in the form of Objects."
      produces:
        - application/json
      responses:
        200:
          description: Fetching User Data Successful
        404:
          description: Data not found
        500:
          description: Task failed
  /ForgotPassword:
    post:
      tags: [User Actions]
      summary: "Sends the Reset Password Request"
      description: "Verifies the received email & then sends the Reset Password Request"
      parameters:
        - name: User Email
          in: body
          description: "Email ID who's password the client has forgotten"
          schema:
            type: object
            properties:
              email:
                type: string
                example: "adityauphade@gmail.com"
                required: true
      produces:
        - application/json
      responses:
        200:
          description: Email Verified
        404:
          description: Email Invalid
        500:
          description: Server Side Error
  # /ResetPassword:
  #   post:
  #     tags: [User Actions]
  #     summary: "Sends the Reset Password Request"
  #     description: "Verifies the received email & then sends the Reset Password Request"
  #     parameters:
  #       - name: User Email
  #         in: body
  #         description: "Email ID who's password the client has forgotten"
  #         schema:
  #           type: object
  #           properties:
  #             email:
  #               type: string
  #               example: "adityauphade@gmail.com"
  #               required: true
  #     produces:
  #       - application/json
  #     responses:
  #       200:
  #         description: Email Verified
  #       404:
  #         description: Email Invalid
  #       500:
  #         description: Server Side Error
  /AddNote:
    post:
      tags: [Note Actions]
      summary: "Let's you add a Note"
      security:
        - BearerAuth: []
      parameters:
        - in: body
          name: "New Note"
          description: "Add a note once the user is Logged in the Application"
          schema:
            type: object
            $ref: '#/definitions/note'
      produces:
        - application/json
      responses:
        201:
          description: Note Added Successfully
        400:
          description: Task Failed
  /Note:
    get:
      tags: [Note Actions]
      summary: "Returns all the Notes."
      security:
        - BearerAuth: []
      description: "Returns the list of stored Notes in the form of Objects."
      produces:
        - application/json
      responses:
        200:
          description: Data Fetched
        404:
          description: No Data Found
        500:
          description: Server side error
  /Note/Delete/{id}:
    delete:
      tags: [Note Actions]
      summary: "Let's you delete the selected Note"
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          description: "Deletes the note."
          required: true
          type: string
      produces:
        - application/json
      responses:
        200:
          description: Note Deleted Successfully
        400:
          description: Task failed
  /Note/Edit/{id}:
    patch:
      tags: [Note Actions]
      summary: "Let's you edit the selected Note"
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          description: ID of the Object
          required: true
          type: string
        - in: body
          name: "Updated Note"
          description: "Edit selected note once the user is Logged in the Application"
          schema:
            type: object
            $ref: '#/definitions/note'
      description: Edits the note.
      produces:
        - application/json
      responses:
        201:
          description: Note Updated Successfully
        400:
          description: Task failed
  /Note/Archive/{id}:
    patch:
      tags: [Note Actions]
      summary: "Let's you archive the selected Note"
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          description: ID of the Object
          required: true
          type: string
      description: Archive the note.
      produces:
        - application/json
      responses:
        200:
          description: Note Archived Successfully
        400:
          description: Task failed
  /Note/Archive:
    get:
      tags: [Note Actions]
      summary: "Returns all the Archived Notes."
      security:
        - BearerAuth: []
      description: "Returns the list of stored Archived Notes in the form of Objects."
      produces:
        - application/json
      responses:
        200:
          description: Data Fetched
        404:
          description: No Data Found
        500:
          description: Server side error
  /Note/Trash:
    get:
      tags: [Note Actions]
      summary: "Returns all the Deleted Notes."
      security:
        - BearerAuth: []
      description: "Returns the list of deleted Archived Notes in the form of Objects."
      produces:
        - application/json
      responses:
        200:
          description: Data Fetched
        404:
          description: No Data Found
        500:
          description: Server side error
definitions:
  signup:
    properties:
      fname:
        type: string
        example: "Aditya"
      lname:
        type: string
        example: "Uphade"
      email:
        type: string
        example: "adityauphade@gmail.com"
      password:
        type: string
        example: "Password"
      required: [fname, lname, email, password]
  login:
    properties:
      email:
        type: string
        example: "adityauphade@gmail.com"
      password:
        type: string
        example: "Password"
    required: [email, password]
  note:
    properties:
      title:
        type: string
        example: Note - Title
      body:
        type: string
        example: Note - Body
      colour:
        type: string
        example: "#000"
      isArchived:
        type: boolean
        example: false
      isDeleted:
        type: boolean
        example: false


